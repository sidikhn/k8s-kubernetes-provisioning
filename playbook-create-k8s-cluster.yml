---
- name: Setup K8s Cluster
  hosts:
    - master-node
    - worker-node
  become: yes
  tasks:
  - name: Disable automatic apt services to avoid dpkg lock (safe)
    systemd:
      name: "{{ item }}"
      enabled: false
      masked: true
    loop:
      - apt-daily.service
      - apt-daily.timer
      - apt-daily-upgrade.service
      - apt-daily-upgrade.timer
      - unattended-upgrades.service
      - unattended-upgrades.timer
    loop_control:
      loop_var: item
    failed_when: false
    ignore_errors: true

  - name: Disable swap
    command: swapoff -a

  - name: Remove swap entry from /etc/fstab
    lineinfile:
      path: /etc/fstab
      regexp: '^(?i)\S+\s+\S+\s+swap'
      state: absent

  - name: Load Kernel Modules
    copy:
      dest: /etc/modules-load.d/k8s.conf
      content: |
        overlay
        br_netfilter

  - name: Load overlay and br_netfilter modules
    command: modprobe {{ item }}
    loop:
      - overlay
      - br_netfilter

  - name: Set sysctl parameters for Kubernetes
    copy:
      dest: /etc/sysctl.d/k8s.conf
      content: |
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1

  - name: Apply sysctl settings
    command: sysctl --system

  - name: Update apt cache
    apt:
      update_cache: yes

  - name: Create directory for Docker GPG key
    file:
      path: /etc/apt/keyrings
      state: directory
      mode: '0755'

  - name: Add Docker's official GPG key
    get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /etc/apt/keyrings/docker.asc
      mode: '0644'

  - name: Get the architecture
    command: dpkg --print-architecture
    register: dpkg_arch

  - name: Add Docker repository
    apt_repository:
      repo: "deb [arch={{ dpkg_arch.stdout }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
      filename: docker
      state: present

  - name: Install Docker and Containerd (with retry)
    shell: |
      apt-get update &&
      DEBIAN_FRONTEND=noninteractive apt-get -y install \
        docker-ce=5:28.2.2-1~ubuntu.22.04~jammy \
        docker-ce-cli=5:28.2.2-1~ubuntu.22.04~jammy \
        containerd.io=1.7.27-1 \
        docker-buildx-plugin=0.24.0-1~ubuntu.22.04~jammy \
        docker-compose-plugin=2.36.2-1~ubuntu.22.04~jammy
    register: docker_install
    until: docker_install.rc == 0
    retries: 10
    delay: 10

  - name: Add user to docker group
    user:
      name: "{{ ansible_user }}"
      groups: docker
      append: yes

  - name: Enable and start Docker services
    systemd:
      name: "{{ item }}"
      enabled: true
      state: started
    loop:
      - docker.service
      - containerd.service

  - name: Configure cgroups to systemd
    shell: |
      containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' \
      | sed 's/sandbox_image = "registry.k8s.io\/pause:[^"]*"/sandbox_image = "registry.k8s.io\/pause:3.10"/' \
      | tee /etc/containerd/config.toml

  - name: Restart Containerd
    systemd:
      name: containerd
      state: restarted

  - name: Remove old Kubernetes repo and key
    file:
      path: "{{ item }}"
      state: absent
    loop:
      - /etc/apt/sources.list.d/kubernetes.list
      - /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      - /tmp/kubernetes-release.key

  - name: Download Kubernetes GPG Key
    get_url:
      url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
      dest: /tmp/kubernetes-release.key

  - name: Add Kubernetes GPG Key
    command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key

  - name: Add Kubernetes Repository
    copy:
      dest: /etc/apt/sources.list.d/kubernetes.list
      content: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'

  - name: Install Kubernetes packages (with retry)
    shell: |
      apt-get update &&
      DEBIAN_FRONTEND=noninteractive apt-get -y install \
        kubelet=1.31.9-1.1 kubeadm=1.31.9-1.1 kubectl=1.31.9-1.1
    register: k8s_install
    until: k8s_install.rc == 0
    retries: 10
    delay: 10

  - name: Hold Kubernetes packages
    command: apt-mark hold kubelet kubeadm kubectl

  - name: Enable kubelet
    systemd:
      name: kubelet
      enabled: true
      state: started

# -----------------------------------------------
- name: Initialize master
  hosts: master-node
  become: yes
  tasks:
  - name: Initialize Kubernetes master
    command: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_host }}
    register: init_result
    failed_when: false

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_raw
    when: init_result.rc == 0

  - name: Save join command
    copy:
      dest: /tmp/join_command.txt
      content: "{{ join_raw.stdout }}"
    when: init_result.rc == 0

  - name: Fetch join command to controller
    fetch:
      src: /tmp/join_command.txt
      dest: /tmp/join_command.txt
      flat: yes
    when: init_result.rc == 0

# -----------------------------------------------
- name: Setup .kube/config for kubectl
  hosts: master-node
  become: yes
  tasks:
  - name: Create .kube directory
    file:
      path: "/home/{{ ansible_user }}/.kube"
      state: directory
      mode: '0755'

  - name: Copy kube config
    copy:
      src: /etc/kubernetes/admin.conf
      dest: "/home/{{ ansible_user }}/.kube/config"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0644'
      remote_src: yes

# -----------------------------------------------
- name: Join worker nodes to cluster
  hosts: worker-node
  become: yes
  tasks:
  - name: Copy join command to worker
    copy:
      src: /tmp/join_command.txt
      dest: /tmp/join_command.txt

  - name: Run join command
    shell: bash /tmp/join_command.txt
